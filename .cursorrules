# Lessons
## User Specified Lessons
- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When working with Supabase, ensure database types are properly defined in types/supabase.ts before implementing realtime features
- In Next.js, enable ESLint and TypeScript type checking only in development for faster production builds
- Use specific vendor chunks in webpack configuration to optimize bundle sizes for frequently used packages
- When implementing rate limiting in PostgreSQL, use metadata JSONB columns for flexible storage of rate limit data
- When using pgcrypto for hashing, ensure the extension is created in the correct schema and parameters are properly cast
- When modifying existing tables in Supabase migrations, use ALTER TABLE with IF EXISTS checks to prevent errors
- When implementing RLS policies, ensure proper GRANT statements are in place for table access

# Scratchpad

## Current Task: Voting System Implementation and Testing

### Progress Summary (2024-02-18)
1. [X] Successfully implemented anonymous voting with rate limiting
2. [X] Added proper function creation with IF NOT EXISTS checks
3. [X] Implemented error handling in all database functions
4. [X] Added transaction control and verification steps
5. [X] Successfully reset and migrated the database
6. [X] Tested rate limiting functionality (5 votes per hour)
7. [X] Verified IP hashing for privacy
8. [X] Confirmed vote persistence and proper metadata storage
9. [X] Removed one-vote-per-product limit for authenticated users
10. [X] Enhanced error handling with detailed messages
11. [X] Improved product specifications and descriptions

### Key Components Implemented
1. Database Functions:
   - [X] handle_anonymous_vote: Rate-limited anonymous voting
   - [X] handle_authenticated_vote: Unlimited authenticated voting with improved error handling
   - [X] get_user_votes: Retrieves votes for both anonymous and authenticated users
   - [X] refresh_product_rankings: Maintains real-time ranking updates

2. Security Features:
   - [X] Row Level Security (RLS) policies
   - [X] IP-based rate limiting (5 votes per hour)
   - [X] Secure function execution with SECURITY DEFINER
   - [X] Proper schema isolation with search_path

3. Performance Optimizations:
   - [X] Materialized view for rankings
   - [X] Concurrent refresh mechanism
   - [X] Proper indexing for fast lookups
   - [X] Trigram indexes for text search
   - [X] Optimized JSON storage with JSONB

4. Product Information:
   - [X] Enhanced product specifications
   - [X] Detailed technical specs
   - [X] Pros and cons lists
   - [X] Multiple image support
   - [X] Price history tracking
   - [X] Brand and model information

### Testing Plan
1. Anonymous Voting:
   [X] Test rate limiting (5 votes per hour)
   [X] Verify IP hashing for privacy
   [X] Check vote persistence

2. Authenticated Voting:
   [X] Test user registration flow
   [X] Verify unlimited votes per product
   [X] Test vote modification
   [X] Test vote deletion

3. Edge Cases:
   [X] Handle network errors
   [X] Test concurrent votes
   [X] Verify transaction rollbacks

### Next Steps
1. [X] Execute comprehensive testing plan
2. [X] Document any issues found
3. [X] Implement fixes as needed
4. [ ] Create user documentation

### Notes
- Rate limiting is working effectively with 5 votes per hour
- IP hashing provides good privacy protection
- Error handling is robust and provides clear feedback
- Consider monitoring vote patterns for potential abuse
- May need to adjust rate limits based on usage patterns
- Enhanced product information improves user experience
- Unlimited authenticated votes encourages user engagement 