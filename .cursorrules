# Lessons
## User Specified Lessons
- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When working with Supabase, ensure database types are properly defined in types/supabase.ts before implementing realtime features
- In Next.js, enable ESLint and TypeScript type checking only in development for faster production builds
- Use specific vendor chunks in webpack configuration to optimize bundle sizes for frequently used packages

# Scratchpad

## Current Task: Final Review and Deployment Preparation

### Overview
Completed documentation and testing phase. Now focusing on final review, fixing remaining issues, and preparing for deployment.

### Progress Tracking

1. Documentation [COMPLETED]
[X] SQL Migration Documentation
[X] Project Documentation (README.md)
[X] Contributing Guidelines
[X] API Documentation
[X] Database Schema Documentation
[X] Component Library Documentation

2. Testing [COMPLETED]
[X] useAuth Hook Tests
[X] useVote Hook Tests
[X] ProductMentionInput Component Tests
[X] Test Coverage Report

3. Final Review Tasks [IN PROGRESS]
[ ] Fix remaining linter/type issues
[ ] Run full test suite in CI/CD pipeline
[ ] Review and update database indexes for performance
[ ] Create database diagrams for schema documentation
[ ] Add code examples to API documentation
[ ] Review security policies and rate limits

4. Deployment Preparation [PENDING]
[ ] Set up staging environment
[ ] Configure production environment variables
[ ] Set up monitoring and logging
[ ] Create deployment documentation
[ ] Plan rollback procedures
[ ] Set up automated backups

### Current Step
Moving to the Final Review phase. Next actions:
1. Run linter and type checker to identify remaining issues
2. Set up CI/CD pipeline for test automation
3. Create database diagrams using a tool like dbdiagram.io
4. Review and enhance API documentation with more code examples

### Notes
- All core documentation is complete and comprehensive
- Test coverage is good for critical components
- Need to focus on deployment preparation and final polish
- Consider adding performance monitoring tools
- Plan for post-deployment maintenance procedures 