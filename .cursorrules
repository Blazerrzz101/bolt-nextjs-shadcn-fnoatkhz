# Lessons
## User Specified Lessons
- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When working with Supabase, ensure database types are properly defined in types/supabase.ts before implementing realtime features
- In Next.js, enable ESLint and TypeScript type checking only in development for faster production builds
- Use specific vendor chunks in webpack configuration to optimize bundle sizes for frequently used packages
- When implementing rate limiting in PostgreSQL, use metadata JSONB columns for flexible storage of rate limit data
- When using pgcrypto for hashing, ensure the extension is created in the correct schema and parameters are properly cast
- When modifying existing tables in Supabase migrations, use ALTER TABLE with IF EXISTS checks to prevent errors
- When implementing RLS policies, ensure proper GRANT statements are in place for table access

# Scratchpad

## Current Task: Database Migration Fixes

### Progress Summary (Latest)
1. [X] Fixed category matching logic in get_product_rankings function
2. [X] Corrected index creation issues
3. [X] Added proper constraint checks with IF NOT EXISTS
4. [X] Successfully reset database with all migrations
5. [X] Verified all migrations applied without errors
6. [X] Updated constraints for url_slug and name validation
7. [X] Enhanced product ranking calculations
8. [X] Implemented proper vote aggregation

### Completed Migrations
1. Base Schema:
   - [X] Initial schema setup
   - [X] Global roles and permissions
   - [X] Core table structures

2. Authentication:
   - [X] Enhanced auth functions
   - [X] Vote authentication
   - [X] Activity tracking
   - [X] Status monitoring

3. Product System:
   - [X] Ranking functions
   - [X] Category matching
   - [X] URL slug validation
   - [X] Name constraints

4. Thread System:
   - [X] Thread creation
   - [X] Thread details
   - [X] Private thread handling

5. Reinforcements:
   - [X] Core reinforcements
   - [X] Additional validations
   - [X] Category fixes

### Next Steps
1. [ ] Test product ranking functionality
2. [ ] Verify vote system works with new changes
3. [ ] Check thread system integration
4. [ ] Document recent database changes

### Notes
- All migrations now apply successfully
- Category matching has been fixed
- Proper constraint handling implemented
- Vote aggregation logic improved
- Thread system properly integrated
- Consider monitoring system performance
- May need to optimize queries based on usage patterns 