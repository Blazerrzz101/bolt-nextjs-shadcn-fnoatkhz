# Lessons
## User Specified Lessons
- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When working with Supabase, ensure database types are properly defined in types/supabase.ts before implementing realtime features
- In Next.js, enable ESLint and TypeScript type checking only in development for faster production builds
- Use specific vendor chunks in webpack configuration to optimize bundle sizes for frequently used packages
- When implementing rate limiting in PostgreSQL, use metadata JSONB columns for flexible storage of rate limit data
- When using pgcrypto for hashing, ensure the extension is created in the correct schema and parameters are properly cast
- When modifying existing tables in Supabase migrations, use ALTER TABLE with IF EXISTS checks to prevent errors
- When implementing RLS policies, ensure proper GRANT statements are in place for table access
- When mocking browser APIs in Jest with TypeScript, prefer using `jest.spyOn` over direct mock objects to maintain proper typing
- For localStorage mocks, consider using a combination of `jest.spyOn` and a mock storage object to maintain both type safety and test functionality
- When working with Jest mocks in TypeScript, ensure mock functions are properly typed using `jest.MockedFunction` or `jest.SpyInstance`
- When mocking Supabase in TypeScript tests, consider using a separate mock file with proper type definitions or use partial mocking with jest.spyOn for better type safety
- When working with Supabase Auth, use email as fallback for display name when user_metadata is not available, and ensure proper user profile data is synced with the auth system

# Scratchpad

## Current Task: Frontend-Backend Integration Fixes

### Progress Summary (Latest)
1. [X] Implemented missing navigation features in NavigationManager
2. [X] Fixed product page routing with dynamic slugs
3. [X] Added proper type handling for product transformations
4. [X] Implemented proper error handling for product fetching
5. [X] Added static parameter generation for product pages
6. [X] Implemented suspense boundaries for better loading states
7. [X] Fixed user navigation component to handle missing user metadata

### Completed Tasks
1. Navigation System:
   - [X] Implemented getAdjacentProducts function
   - [X] Added proper type safety
   - [X] Implemented navigation path generation
   - [X] Added error handling

2. Product Pages:
   - [X] Implemented dynamic routing
   - [X] Added proper data fetching
   - [X] Implemented error handling
   - [X] Added loading states
   - [X] Fixed type transformations

3. Type System:
   - [X] Fixed Product type usage
   - [X] Added proper type transformations
   - [X] Implemented consistent type usage
   - [X] Added proper error handling

4. Auth System:
   - [X] Fixed UserNav component
   - [X] Added proper fallback for display names
   - [X] Ensured type safety in auth components

### Next Steps
1. [ ] Test navigation system with real data
2. [ ] Verify product page loading states
3. [ ] Test error handling scenarios
4. [ ] Add end-to-end tests
5. [ ] Set up user profile sync with auth system

### Notes
- All navigation features now implemented
- Product pages properly handle dynamic routes
- Type system is consistent across components
- Loading states properly implemented
- Error handling in place
- Consider adding more comprehensive testing
- Need to implement user profile sync with auth system 